class Solution {
    int freq[];
    int ans[];

    private boolean recur(int i, int n) {
        if (i == 2 * n - 1) {
            return true;
        }
        if (ans[i] != 0) {
            return recur(i + 1, n);
        }
        for (int idx = n; idx >= 1; idx--) {
            if (freq[idx] == 0) {
                continue;
            }
            if (idx != 1 && i + idx < 2 * n - 1 && ans[i] == 0 && ans[i + idx] == 0) {
                ans[i] = ans[i + idx] = idx;
                freq[idx] = 0;
                if (recur(i + 1, n)) {
                    return true;
                }
                freq[idx] = 2;  
                ans[i] = ans[i + idx] = 0;
            } else if (idx == 1) {
                ans[i] = 1;
                freq[idx] = 0;
                if (recur(i + 1, n)) {
                    return true;
                }
                ans[i] = 0;
                freq[idx] = 1; 
            }
        }
        return false;
    }

    public int[] constructDistancedSequence(int n) {
        freq = new int[n + 1];
        freq[1] = 1;
        for (int i = 2; i <= n; i++) {
            freq[i] = 2;
        }
        ans = new int[2 * n - 1];
        recur(0, n);
        return ans;
    }
}
